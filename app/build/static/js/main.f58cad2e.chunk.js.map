{"version":3,"sources":["components/FormSearch.js","components/BreadCrumb.js","services/http.js","services/products-search.js","components/ProductList.js","services/product-detail.js","components/ProductDetail.js","components/App.js","serviceWorker.js","index.js"],"names":["FormSearch","props","context","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSubmit","event","preventDefault","query","history","push","concat","search","changeInput","target","value","react_default","a","createElement","type","required","placeholder","name","onChange","onClick","src","alt","Component","withRouter","BreadCrumb","id","http","axios","create","baseURL","productsSearchService","get","ProductLoaded","ProductList","state","products","updateProducts","_this2","ProductSearchService","location","then","res","setState","data","err","prevProps","className","length","map","key","Link","to","thumbnail","price","title","address","state_name","productDetailService","ProductDetail","console","log","product","updateProduct","ProductDetailService","match","params","item","description","Home","App","searchText","BrowserRouter","components_FormSearch","components_BreadCrumb","Route","exact","path","component","Boolean","window","hostname","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f58cad2e.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\n\n\nclass FormSearch extends Component {\n\n    constructor(props, context){\n       super(props, context);\n       this.query ='';\n    }\n\n\n    onSubmit = (event) => {\n      event.preventDefault();  \n      const query = this.query;\n      this.props.history.push(`/items?q=${query}`, {search: query});\n    \n\n    }\n\n    changeInput = (event) => {\n\n        this.query = event.target.value;\n    }\n    \n\n    render () {\n      \n      return (\n       <form >\n         <input type=\"search\" required placeholder=\"Nunca deixe de buscar\"  name=\"query\"  onChange={this.changeInput}/>\n         <button onClick={this.onSubmit} ><img src=\"/images/ic_Search.png\" alt=\"Busca\" /></button>\n       </form>\n      )\n    }\n}\n\nexport default withRouter(FormSearch);\n","import React from 'react';\n\nconst BreadCrumb = (props) => {\n     return (<ul id=\"breadcrumb\">\n           <li>Eletronica </li>\n           <li>Produtos</li>\n           <li>Áudio</li>\n           <li>Video</li>\n           <li>Videos</li>\n           </ul>)      \n  \n}\n\nexport default BreadCrumb\n","import axios from 'axios'\n\nexport const http = axios.create({\n   baseURL:'http://localhost:8081/'\n})\n\n \n","import {http} from  './http'\n\nconst productsSearchService = query => http.get(`items?search=${query}`); \n\nexport default productsSearchService;\n","import React, { Component } from 'react';\nimport ProductSearchService from '../services/products-search';\nimport { Link } from \"react-router-dom\";\nlet ProductLoaded = false;\nclass ProductList extends Component {\n    \n   constructor(props){     \n      super(props);          \n      this.state = {products: [] };\n      this.updateProducts();\n   } \n\n\n   updateProducts (){\n     \n      ProductSearchService(this.props.location.state.search).then((res) => {\n             \n         this.setState({products : res.data});\n         ProductLoaded = true;\n             \n      },(err) => {\n         \n         ProductLoaded = true;\n          \n      });\n\n   }\n   \n   \n   componentDidUpdate(prevProps) {\n   \n      if (this.props.location.search !== prevProps.location.search) {\n        this.updateProducts();\n      }\n    }\n\n\n   render (){\n     \n     return (\n        <div className=\"content-center product-list\">\n            {(this.state.products.length > 0 || ProductLoaded ===  false) ? (this.state.products.map( res => (\n                <section className=\"list-item\" key={res.id}>\n                     <Link to={(`/item/${res.id}`)}>\n                     <img src={res.thumbnail} alt={res.thumbnail}/>\n                     <div className=\"item-description\" >\n                        <h2><span className=\"currency-type\">$</span>{res.price} <img src=\"/images/ic_shipping.png\" alt=\"Transportadora\" /></h2>\n                        <p>{res.title}</p>\n                     </div>                   \n                     </Link>\n                     <div className=\"item-right\"> {res.address.state_name}</div>\n                </section> \n            \n              ))\n             ): <div className=\"message-empty-result text-gray\"> Não foram encontrados resultados na busca</div>}                       \n        </div>\n    );   \n   }\n    \n  \n}\n\nexport default ProductList;\n","import {http} from  './http'\n\nconst productDetailService = id => http.get(`items/${id}`); \n\nexport default productDetailService;\n","import React, { Component } from 'react';\nimport ProductDetailService from '../services/product-detail';\n\n/**\n * Product Detail \n * \n **/\n\n\n \nclass ProductDetail extends Component {\n\n    constructor(props){\n\n        super(props);\n        console.log(this.state);\n        this.state = {product:{}};\n        this.updateProduct();    \n    }\n\n\n\n    updateProduct(){\n\n       \n        ProductDetailService(this.props.match.params.id).then((res) => {\n               \n           this.setState({product : res.data});\n               \n        },(err) => {\n           \n           console.log(err);\n            \n        });\n\n    }\n\n    componentDidUpdate(prevProps) {\n        // Typical usage (don't forget to compare props):\n        if (this.props.location.item !== prevProps.location.item) {\n          this.updateProduct();\n        }\n    }\n  \n\n    render (){\n        const product = this.state.product; \n        return (\n            <div className=\"content-center product-detail\">\n                <div className=\"wrapper-content bg-white\">\n                    <section className=\"product-col-1\">\n                    <img src={product.thumbnail}  alt={product.title}/>\n                    <div>\n                    <h2 className=\"title-description\"> Descrição do produto:</h2>\n                    <p className=\"text-gray\">{product.description}</p>\n                    </div>\n                    </section>\n                    <div className=\"product-col-2\">\n                    <span className=\"text-small\">Nuevo - 234 vendidos</span>\n                    <h2 className=\"product-title\">{product.title}</h2>\n                    <span className=\"price\"><span className=\"currency-type-detail\">$</span>{product.price}</span>\n                    <button className=\"btn-primary\">Comprar</button>\n                    </div>    \n                </div>      \n            </div>\n        )\n   }  \n}\n\nexport default ProductDetail;\n","import React, { Component } from 'react';\nimport '../App.css';\nimport FormSearch from './FormSearch';\nimport BreadCrumb from './BreadCrumb';\nimport ProductList from './ProductList';\nimport ProductDetail from './ProductDetail';\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\n\n\nconst Home = () => {\n\n  return '';\n\n} \n\nclass App extends Component {\n    \n constructor(props){\n       super(props);\n       \n       this.state = {\n          searchText:''\n       }\n       \n  }\n    \n  render ( ) {\n     \n      return(\n      <Router>\n        <div className=\"App\">\n            <header>\n            <nav className=\"menu-top content-center\">\n             <Link to=\"/\"><img src=\"/images/Logo_ML.png\" className=\"logo\" alt=\"Logo Mercado Livre\" /></Link>\n              <FormSearch />        \n            </nav>\n            </header>\n            <nav className=\"content-center\">\n             <BreadCrumb />           \n            </nav>        \n            <Route exact path=\"/\" component={Home} />\n            <Route path=\"/items\" component={ProductList} />\n            <Route path=\"/item/:id\" component={ProductDetail} />          \n        </div>\n      </Router>\n      )\n    }\n\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}